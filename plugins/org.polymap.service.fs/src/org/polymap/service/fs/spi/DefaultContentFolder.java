/* 
 * polymap.org
 * Copyright 2011, Polymap GmbH. All rights reserved.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 */
package org.polymap.service.fs.spi;

import java.util.Date;
import java.util.Map;
import java.util.TreeMap;

import java.io.IOException;
import java.io.OutputStream;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.bradmcevoy.http.XmlWriter;
import org.eclipse.core.runtime.IPath;

/**
 * 
 *
 * @author <a href="http://www.polymap.de">Falko Bräutigam</a>
 */
public class DefaultContentFolder
        extends DefaultContentNode
        implements IContentFolder {

    private static Log log = LogFactory.getLog( DefaultContentFolder.class );

    protected Date              modified = new Date();
    

    public DefaultContentFolder( String name, IPath parentPath, IContentProvider provider, Object source ) {
        super( name, parentPath, provider, source );
    }


    /**
     * This default implementation always returns the creation date of the object
     * stored in {@link #modified}.
     */
    public Date getModifiedDate() {
        return modified;
    }


    /**
     * This default implementation always returns 60.
     */
    public Long getMaxAgeSeconds() {
        return (long)60;
    }


    /**
     * This default implementation generates a file list in a HTML table.
     */
    public void sendDescription( OutputStream out, Range range, Map<String,String> params, String contentType )
            throws IOException {
        XmlWriter w = new XmlWriter( out );
        w.open( "html" );
        w.open( "body" );
        w.begin( "h1" ).open().writeText( "Folder: " + getPath().toString() ).close();

        // sort
        Map<String,IContentFile> files = new TreeMap();
        Map<String,IContentFolder> folders = new TreeMap();
        for (IContentNode node : getSite().getChildren( getPath() )) {
            if (node instanceof IContentFile) {
                files.put( node.getName(), (IContentFile)node );
            }
            else if (node instanceof IContentFolder) {
                folders.put( node.getName(), (IContentFolder)node );
            }
            else {
                throw new IllegalStateException( "Unknown node type: " + node.getClass() );
            }
        }
        createFileTable( w, folders.values() );
        createFileTable( w, files.values() );
        
        w.begin( "hr" ).close();
        w.begin( "em" ).open().writeText( "Generated by POLYMAP3 WebDAV" ).close();
        
        w.close( "body" );
        w.close( "html" );
        w.flush();
        out.flush();
    }

    
    protected void createFileTable( XmlWriter w, Iterable<? extends IContentNode> nodes ) {
        w.open( "table" );

        for (IContentNode node : nodes) {
            w.open( "tr" );
            w.open( "td" );
            // FIXME hard coded servlet path
            String basePath = FilenameUtils.normalizeNoEndSeparator( node.getPath().toString() );
            String path = "/webdav" + basePath /*+ "/" + node.getName()*/;
            log.debug( path );

            w.begin( "a" ).writeAtt( "href", path ).open().writeText( node.getName() ).close();

//            w.begin( "a" ).writeAtt( "href", "#" ).writeAtt( "onclick",
//                    "editDocument('" + path + "')" ).open().writeText( "(edit with office)" )
//                    .close();

            w.close( "td" );

            w.begin( "td" ).open().writeText( node.getModifiedDate() + "" ).close();
            w.close( "tr" );
        }
        w.close( "table" );
        w.flush();
    }

}
